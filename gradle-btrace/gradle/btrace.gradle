import groovy.text.*
import groovy.text.markup.*
import groovy.util.XmlSlurper

// add configuration for btrace (https://github.com/jbachorik/btrace)
// usage:
// apply from:'/path/to/btrace.gradle'
// place btrace scripts in btrace directory
sourceSets {
    btrace {
        java {
            srcDir 'btrace'
        }
    }
}

configurations {
    btraceAgent
    btraceCompile.extendsFrom(compile)
    btraceCompiler
}

ext {
    if (!project.hasProperty("btraceHome")) {
        btraceHome = System.getenv("BTRACE_HOME") ?: "${System.getProperty('user.home')}/tools/btrace".toString()
    }
}

if (new File("$btraceHome/build/btrace-boot.jar").exists()) {
    dependencies {
        // newest btrace version isn't available in maven central or jcenter/bintray
        // download from https://kenai.com/projects/btrace/downloads/directory/releases
        // use BTRACE_HOME environment variable to set home directory
        // https://bintray.com/jbachorik/maven/btrace/view#files has older version
        btraceCompile files("$btraceHome/build/btrace-boot.jar")
        btraceAgent files("$btraceHome/build/btrace-agent.jar")
        btraceCompiler files("$btraceHome/build/btrace-client.jar", "${System.getenv("JAVA_HOME")}/lib/tools.jar")
    }
} else {
    repositories { maven { url "http://dl.bintray.com/jbachorik/maven" } }
    dependencies {
        btraceCompile "com.sun.tools.btrace:btrace-boot:latest.integration"
        btraceAgent "com.sun.tools.btrace:btrace-agent:latest.integration"
        btraceCompiler "com.sun.tools.btrace:btrace-client:latest.integration"
        btraceCompiler files("${System.getenv("JAVA_HOME")}/lib/tools.jar")
    }
}

task btraceCompile(type: JavaExec, dependsOn: btraceClasses) {
    def outputDir = new File(buildDir, "btrace-scripts")
    outputs.dir(outputDir)
    classpath = configurations.btraceCompiler
    main = 'com.sun.btrace.compiler.Compiler'
    ignoreExitValue = false
    def compileClasspath = configurations.compile.files
    if (compileClasspath) {
        args '-cp', compileClasspath.join(':')
    }
    args '-d', outputDir
    args '-unsafe'
    args sourceSets.btrace.java.files
    inputs.files(sourceSets.btrace.java.srcDirs)
}

task generateProfilerProbeXml << {
    File probesTxt = new File('btrace-probes/profiler-probes.txt')
    if (probesTxt.exists()) {
        def probes = []
        probesTxt.eachLine { inputline ->
            def line = inputline.trim()
            if (line && !line.startsWith("#")) {
                probes << line
            }
        }
        Template xmltemplate = createProfilerProbesTemplate()
        new File('btrace-probes/profiler-probes.xml').withWriter('UTF-8') { writer ->
            xmltemplate.make([probes: probes]).writeTo(writer)
        }
    }
}

task generateProfilerProbeXmlFromIdea << {
    def probes = readProbesFromIdea(new File(getProperty("ideaWorkspaceFile")))
    if (probes) {
        Template xmltemplate = createProfilerProbesTemplate()
        new File('btrace-probes/profiler-probes.xml').withWriter('UTF-8') { writer ->
            xmltemplate.make([probes: probes]).writeTo(writer)
        }
    }
}

task importProfilerProbesFromIdeaToProbesTxt << {
    def probes = readProbesFromIdea(new File(getProperty("ideaWorkspaceFile")))
    if (probes) {
        new File('btrace-probes/profiler-probes.txt').withWriterAppend('UTF-8') { writer ->
            probes.each { row ->
                writer << row.classname << '.' << row.methodname << '\n'
            }
        }
    }
}

private List<Map> readProbesFromIdea(File ideaWorkspaceFile) {
    if (ideaWorkspaceFile.exists()) {
        def rootNode = new XmlSlurper().parse(ideaWorkspaceFile)
        def probes = rootNode.'**'.findAll { node -> node.name() == 'line-breakpoint' && node.@type == 'java-method' }.collect { node ->
            def props = node.children().find { it.name() == 'properties' }
            [classname: props.@class, methodname: props.@method]
        }
        return probes
    } else {
        return []
    }
}

private Template createProfilerProbesTemplate() {
    TemplateConfiguration config = new TemplateConfiguration()
    config.autoIndent = true
    config.autoNewLine = true
    config.declarationEncoding = 'UTF-8'
    MarkupTemplateEngine engine = new MarkupTemplateEngine(config)
    Template xmltemplate = engine.createTemplate('''
 xmlDeclaration()
 "btrace-probes"(namespace:"profiler-probes") {
    ["profiler-entry","profiler-exit"].each { phase ->
        probe(name:phase) {
            for(probeentry in probes) {
                def classname
                def methodname
                if(probeentry instanceof Map) {
                    classname = probeentry.classname
                    methodname = probeentry.methodname
                } else {
                    def matcher = (probeentry =~ /^([^\\/]+)\\.(.+)$/)[0]
                    classname = matcher[1]
                    methodname = matcher[2]
                }
                map {
                    clazz(classname)
                    method(methodname)
                    if(phase=="profiler-exit") {
                        location {
                            value("RETURN")
                        }
                    }
                }
            }
        }
    }
}
            ''')
    xmltemplate
}

// reads debugging breakpoints exported from Eclipse
def readEclipseBreakPoints() {
    def probes = []
    File probesEclipseBreakpoints = new File('btrace-probes/legstopwatch-probes.bkpt')
    if (probesEclipseBreakpoints.exists()) {
        def breakpointsRoot = new XmlSlurper().parse(probesEclipseBreakpoints)
        breakpointsRoot.breakpoint.marker.each { marker ->
            def classname = marker.attrib.find { it.@name == 'org.eclipse.jdt.debug.core.typeName' }?.@value?.text()
            def methodname = "/.+/"
            def linenumber = marker.@lineNumber.text()
            if (classname && linenumber) {
                probes << [classname, methodname, linenumber]
            }
        }
    }
    probes
}

task generateLegstopwatchProbeXml << {
    def probes = []
    File probesTxt = new File('btrace-probes/legstopwatch-probes.txt')
    if (probesTxt.exists()) {
        probesTxt.eachLine { inputline ->
            def line = inputline.trim()
            if (line && !line.startsWith("#")) {
                def parts = line.split(":")
                def classname = parts[0]
                def methodname = parts.size() > 2 ? parts[1] : "/.+/"
                def linenumber = parts[-1]
                if (classname && linenumber) {
                    probes << [classname, methodname, linenumber]
                }
            }
        }
    }
    probes.addAll(readEclipseBreakPoints())
    if (probes) {
        TemplateConfiguration config = new TemplateConfiguration()
        config.autoIndent = true
        config.autoNewLine = true
        config.declarationEncoding = 'UTF-8'
        MarkupTemplateEngine engine = new MarkupTemplateEngine(config)
        Template xmltemplate = engine.createTemplate('''
 xmlDeclaration()
 "btrace-probes"(namespace:"legstopwatch-probes") {
    probe(name:"legstopwatch-probe") {
        for(probeentry in probes) {
            def (classname, methodname, linenumber) = probeentry
            map {
                clazz(classname)
                method(methodname)
                location {
                    value("LINE")
                    line(linenumber)
                }
            }
        }
    }
}
            ''')
        new File('btrace-probes/legstopwatch-probes.xml').withWriter('UTF-8') { writer ->
            xmltemplate.make([probes: probes]).writeTo(writer)
        }
    }
}

task printEclipseBreakpoints << {
    readEclipseBreakPoints().each { classname, methodname, linenumber ->
        println "$classname:$linenumber"
    }
}

def createBtraceAgentJvmArgs() {
    def btraceAgentJar = configurations.btraceAgent.files.first()
    def debugMode = false
    if (project.hasProperty("btraceDebug") && project.getProperty("btraceDebug")) {
        debugMode = true
    }
    // btrace agent options: https://github.com/jbachorik/btrace/wiki#starting-application-with-btrace
    def btraceAgentOptions = [
            scriptdir    : "$buildDir/btrace-scripts",
            probeDescPath: "${project.file('btrace-probes')}",
            stdout       : false,
            noServer     : true,
            unsafe       : true,
            debug        : debugMode,
            scriptOutputFile: "${System.getProperty('java.io.tmpdir')}/${rootProject.name}.btrace.out".toString()
    ]
    ["-Xshare:off", "-Xverify:none", "-javaagent:$btraceAgentJar=${btraceAgentOptions.collect { k, v -> "$k=$v".toString() }.join(',')}"]
}

task printBtraceAgentJvmArgs(dependsOn: [btraceCompile, generateProfilerProbeXml]) << {
    println createBtraceAgentJvmArgs().join(" ")
}

if (plugins.hasPlugin("eclipse")) {
    eclipse {
        classpath {
            plusConfigurations += [configurations.btraceCompile]
        }
    }
}

if (plugins.hasPlugin("idea")) {
    idea {
        module {
            sourceDirs += project.sourceSets.btrace.java.srcDirs
            scopes.PROVIDED.plus += [configurations.btraceCompile]
        }
    }
}